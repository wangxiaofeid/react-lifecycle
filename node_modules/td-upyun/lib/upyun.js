"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var sign = require("./sign");
var create_req_1 = require("./create-req");
var Client = /** @class */ (function () {
    // private bodySignCallback: (service: Service, params: any) => { policy: string, authorization: string};
    function Client(service, params, getHeaderSign) {
        var config = Object.assign({
            domain: 'v0.api.upyun.com',
            protocol: 'https'
        }, params);
        this.endpoint = config.protocol + '://' + config.domain;
        this.service = service;
        this.req = create_req_1.default({
            endpoint: this.endpoint,
            service: this.service,
            getHeaderSign: getHeaderSign || sign.getHeaderSign
        });
        // this.setBodySignCallback(sign.getPolicyAndAuthorization);
    }
    // setBodySignCallback (getBodySign: (service: Service, params: any) => { policy: string, authorization: string}) {
    //   if (typeof getBodySign !== 'function') {
    //     throw new Error('upyun - getBodySign should be a function');
    //   }
    //   this.bodySignCallback = getBodySign;
    // }
    Client.prototype.usage = function (path) {
        var _this = this;
        if (path === void 0) { path = '/'; }
        return new Promise(function (resolve) {
            _this.req.get(path + '?usage').then(function (_a) {
                var data = _a.data;
                resolve(data);
            })
                .catch(function (e) {
                console.log(e.error);
                resolve(false);
            });
        });
    };
    Client.prototype.listDir = function (path, _a) {
        var _this = this;
        if (path === void 0) { path = '/'; }
        var _b = _a === void 0 ? {} : _a, _c = _b.limit, limit = _c === void 0 ? 100 : _c, _d = _b.order, order = _d === void 0 ? 'asc' : _d, _e = _b.iter, iter = _e === void 0 ? '' : _e;
        var requestHeaders = {};
        // NOTE: 默认值可以省去请求头设置，避免跨域影响
        if (limit !== 100) {
            requestHeaders['x-list-limit'] = limit;
        }
        if (order !== 'asc') {
            requestHeaders['x-list-order'] = order;
        }
        if (iter) {
            requestHeaders['x-list-iter'] = iter;
        }
        return new Promise(function (resolve) {
            _this.req.get(path, {
                headers: requestHeaders
            }).then(function (res) {
                var body = res.body, headers = res.headers, statusCode = res.statusCode;
                if (statusCode === 404) {
                    resolve(false);
                }
                var next = headers['x-upyun-list-iter'];
                if (!body) {
                    resolve({
                        files: [],
                        next: next
                    });
                }
                var items = body.split('\n');
                var files = items.map(function (item) {
                    var _a = item.split('\t'), name = _a[0], type = _a[1], size = _a[2], time = _a[3];
                    return {
                        name: name,
                        type: type,
                        size: parseInt(size),
                        time: parseInt(time)
                    };
                });
                resolve({
                    files: files,
                    next: next
                });
            })
                .catch(function (e) {
                console.log(e.error);
                resolve(false);
            });
        });
    };
    Client.prototype.makeDir = function (remotePath) {
        var _this = this;
        return new Promise(function (resolve) {
            _this.req.post(remotePath, {
                headers: { folder: 'true' }
            }).then(function (_a) {
                var statusCode = _a.statusCode;
                resolve(statusCode === 200);
            })
                .catch(function (e) {
                console.log(e.error);
                resolve(false);
            });
        });
    };
    Client.prototype.headFile = function (remotePath) {
        var _this = this;
        return new Promise(function (resolve) {
            _this.req.head(remotePath).then(function (_a) {
                var headers = _a.headers, statusCode = _a.statusCode;
                if (statusCode === 404) {
                    resolve(false);
                }
                var params = ['x-upyun-file-type', 'x-upyun-file-size', 'x-upyun-file-date', 'Content-Md5'];
                var result = {};
                params.forEach(function (item) {
                    var key = item.split('x-upyun-file-')[1];
                    if (headers[item]) {
                        result[key] = headers[item];
                        if (key === 'size' || key === 'date') {
                            result[key] = parseInt(result[key], 10);
                        }
                    }
                });
                resolve(result);
            })
                .catch(function (e) {
                console.log(e.error);
                resolve(false);
            });
        });
    };
    Client.prototype.deleteFile = function (remotePath, isAsync) {
        var _this = this;
        if (isAsync === void 0) { isAsync = false; }
        var headers = {};
        if (isAsync) {
            headers['x-upyun-async'] = true;
        }
        return new Promise(function (resolve) {
            _this.req.delete(remotePath, {
                headers: headers
            }).then(function (_a) {
                var statusCode = _a.statusCode;
                resolve(statusCode === 200);
            })
                .catch(function (e) {
                console.log(e.error);
                resolve(false);
            });
        });
    };
    Client.prototype.deleteDir = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return this.deleteFile.apply(this, args);
    };
    Client.prototype.putFile = function (remotePath, localFile, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        // optional params
        var keys = ['Content-MD5', 'Content-Length', 'Content-Type', 'Content-Secret', 'x-gmkerl-thumb'];
        var headers = {};
        keys.forEach(function (key) {
            var lower = key.toLowerCase();
            var finded = options[key] || options[lower];
            if (finded) {
                headers[key] = finded;
            }
            else if (isMeta(key)) {
                headers[key] = options[key];
            }
        });
        return new Promise(function (resolve) {
            _this.req.put(remotePath, {
                body: localFile,
                headers: headers
            }).then(function (res) {
                if (res.statusCode !== 200) {
                    resolve(false);
                    return;
                }
                var responseHeaders = res.headers;
                var params = ['x-upyun-width', 'x-upyun-height', 'x-upyun-file-type', 'x-upyun-frames'];
                var result = {};
                params.forEach(function (item) {
                    var key = item.split('x-upyun-')[1];
                    if (responseHeaders[item]) {
                        result[key] = responseHeaders[item];
                        if (key !== 'file-type') {
                            result[key] = parseInt(result[key], 10);
                        }
                    }
                });
                resolve(Object.keys(result).length > 0 ? result : true);
            })
                .catch(function (e) {
                console.log(e.error);
                resolve(false);
            });
        });
    };
    Client.prototype.getFile = function (remotePath, saveStream) {
        var _this = this;
        return new Promise(function (resolve) {
            _this.req.get(remotePath).then(function (response) {
                if (response.status === 404) {
                    resolve(false);
                    return;
                }
                if (!saveStream) {
                    resolve(response.data);
                    return;
                }
                var stream = response.data.pipe(saveStream);
                resolve(new Promise(function (_resolve, _reject) {
                    stream.on('finish', function () { return _resolve(stream); });
                    stream.on('error', _reject);
                }));
            })
                .catch(function (e) {
                console.log(e.error);
                resolve(false);
            });
        });
    };
    return Client;
}());
exports.Client = Client;
function isMeta(key) {
    return key.indexOf('x-upyun-meta-') === 0;
}
//# sourceMappingURL=data:application/json;base64,