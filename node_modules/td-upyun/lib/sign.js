"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var md5 = require("md5");
var crypto = require("crypto");
var base64 = require("base-64");
var _version = '3.3.4';
function hmacsha1(key, data) {
    return crypto.createHmac('sha1', key).update(data).digest().toString('base64');
}
/**
 * generate head sign
 * @param {object} service
 * @param {string} path - storage path on upyun server, e.g: /your/dir/example.txt
 * @param {string} contentMd5 - md5 of the file that will be uploaded
 */
function getHeaderSign(service, method, path, contentMd5) {
    var date = new Date().toUTCString();
    path = '/' + service.serviceName + path;
    var sign = genSign(service, {
        method: method,
        path: path,
        date: date,
        contentMd5: contentMd5
    });
    return {
        'Authorization': sign,
        'X-Date': date,
    };
}
exports.getHeaderSign = getHeaderSign;
/**
 * generate signature string which can be used in head sign or body sign
 * @param {object} service
 * @param {object} options - must include key is method, path
 */
function genSign(service, options) {
    var method = options.method, path = options.path;
    var data = [
        method,
        encodeURI(path)
    ];
    // optional params
    ['date', 'policy', 'contentMd5'].forEach(function (item) {
        if (options[item]) {
            data.push(options[item]);
        }
    });
    // hmacsha1 return base64 encoded string
    var sign = hmacsha1(service.password, data.join('&'));
    return "UPYUN " + service.operatorName + ":" + sign;
}
exports.genSign = genSign;
/**
 * get policy and authorization for form api
 * @param {object} service
 * @param {object} - other optional params @see http://docs.upyun.com/api/form_api/#_2
 */
function getPolicyAndAuthorization(service, params) {
    params['service'] = service.serviceName;
    if (typeof params['save-key'] === 'undefined') {
        throw new Error('upyun - calclate body sign need save-key');
    }
    if (typeof params['expiration'] === 'undefined') {
        // default 30 minutes
        params['expiration'] = Math.floor(new Date().getTime() / 1000 + 30 * 60);
    }
    var policy = base64.encode(JSON.stringify(params));
    var authorization = genSign(service, {
        method: 'POST',
        path: '/' + service.serviceName,
        policy: policy
    });
    return {
        policy: policy,
        authorization: authorization
    };
}
exports.getPolicyAndAuthorization = getPolicyAndAuthorization;
function getPurgeHeaderSign(service, urls) {
    var date = new Date().toUTCString();
    var str = urls.join('\n');
    var sign = md5(str + "&" + service.serviceName + "&" + date + "&" + service.password);
    return {
        'Authorization': "UpYun " + service.serviceName + ":" + service.operatorName + ":" + sign,
        'Date': date,
        'User-Agent': 'Js-Sdk/' + _version
    };
}
exports.getPurgeHeaderSign = getPurgeHeaderSign;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lnbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9zaWduLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEseUJBQTJCO0FBQzNCLCtCQUFpQztBQUNqQyxnQ0FBa0M7QUFFbEMsSUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDO0FBRXpCLGtCQUFrQixHQUFXLEVBQUUsSUFBWTtJQUN6QyxPQUFPLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDakYsQ0FBQztBQU9EOzs7OztHQUtHO0FBQ0gsdUJBQStCLE9BQWdCLEVBQUUsTUFBYyxFQUFFLElBQVksRUFBRSxVQUEwQjtJQUN2RyxJQUFNLElBQUksR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3RDLElBQUksR0FBRyxHQUFHLEdBQUcsT0FBTyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7SUFDeEMsSUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLE9BQU8sRUFBRTtRQUM1QixNQUFNLFFBQUE7UUFDTixJQUFJLE1BQUE7UUFDSixJQUFJLE1BQUE7UUFDSixVQUFVLFlBQUE7S0FDWCxDQUFDLENBQUM7SUFDSCxPQUFPO1FBQ0wsZUFBZSxFQUFFLElBQUk7UUFDckIsUUFBUSxFQUFFLElBQUk7S0FDZixDQUFDO0FBQ0osQ0FBQztBQWJELHNDQWFDO0FBRUQ7Ozs7R0FJRztBQUNILGlCQUF5QixPQUFnQixFQUFFLE9BQVk7SUFDOUMsSUFBQSx1QkFBTSxFQUFFLG1CQUFJLENBQVk7SUFFL0IsSUFBTSxJQUFJLEdBQUc7UUFDWCxNQUFNO1FBQ04sU0FBUyxDQUFDLElBQUksQ0FBQztLQUNoQixDQUFDO0lBRUYsa0JBQWtCO0lBQ2xCLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxZQUFZLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxJQUFJO1FBQzNDLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ2pCLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7U0FDMUI7SUFDSCxDQUFDLENBQUMsQ0FBQztJQUVILHdDQUF3QztJQUN4QyxJQUFNLElBQUksR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDeEQsT0FBTyxXQUFTLE9BQU8sQ0FBQyxZQUFZLFNBQUksSUFBTSxDQUFDO0FBQ2pELENBQUM7QUFsQkQsMEJBa0JDO0FBRUQ7Ozs7R0FJRztBQUNILG1DQUEyQyxPQUFnQixFQUFFLE1BQVc7SUFDdEUsTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUM7SUFDeEMsSUFBSSxPQUFPLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxXQUFXLEVBQUU7UUFDN0MsTUFBTSxJQUFJLEtBQUssQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDO0tBQzdEO0lBRUQsSUFBSSxPQUFPLE1BQU0sQ0FBQyxZQUFZLENBQUMsS0FBSyxXQUFXLEVBQUU7UUFDL0MscUJBQXFCO1FBQ3JCLE1BQU0sQ0FBQyxZQUFZLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLEdBQUcsSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztLQUMxRTtJQUVELElBQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ3JELElBQU0sYUFBYSxHQUFHLE9BQU8sQ0FBQyxPQUFPLEVBQUU7UUFDckMsTUFBTSxFQUFFLE1BQU07UUFDZCxJQUFJLEVBQUUsR0FBRyxHQUFHLE9BQU8sQ0FBQyxXQUFXO1FBQy9CLE1BQU0sUUFBQTtLQUNQLENBQUMsQ0FBQztJQUNILE9BQU87UUFDTCxNQUFNLFFBQUE7UUFDTixhQUFhLGVBQUE7S0FDZCxDQUFDO0FBQ0osQ0FBQztBQXJCRCw4REFxQkM7QUFFRCw0QkFBb0MsT0FBZ0IsRUFBRSxJQUFjO0lBQ2xFLElBQU0sSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDdEMsSUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM1QixJQUFNLElBQUksR0FBRyxHQUFHLENBQUksR0FBRyxTQUFJLE9BQU8sQ0FBQyxXQUFXLFNBQUksSUFBSSxTQUFJLE9BQU8sQ0FBQyxRQUFVLENBQUMsQ0FBQztJQUU5RSxPQUFPO1FBQ0wsZUFBZSxFQUFFLFdBQVMsT0FBTyxDQUFDLFdBQVcsU0FBSSxPQUFPLENBQUMsWUFBWSxTQUFJLElBQU07UUFDL0UsTUFBTSxFQUFFLElBQUk7UUFDWixZQUFZLEVBQUUsU0FBUyxHQUFHLFFBQVE7S0FDbkMsQ0FBQztBQUNKLENBQUM7QUFWRCxnREFVQyJ9